#include<stdio.h>
#include<stdlib.h>
#pragma warning(disable:4996)
/* score : 90/100 */
typedef struct treeNode {
	struct treeNode *parent;
	struct treeNode *lchild;
	struct treeNode *rchild;
	int key;
	int height;
}Node;
void init(Node *root) {
	root->parent = NULL;
	root->rchild = NULL;
	root->lchild = NULL;
	root->height = 0;
}
void print(Node *node);
Node* treeSearch(Node *root, int ele);
int isExternal(Node *node);
int findElement(Node *root, int ele);
Node* insert(Node *root, int ele);
void expandExternal(Node *node, int ele);
void updateHeight(Node *node);
int isBalanced(Node *node);
Node* searchAndFixAfterInsertion(Node *node);
Node* restructure(Node *x, Node *y, Node *z);
Node* removeElement(Node *root, int ele);
Node* reduceExternal(Node *z);
Node* inOrderSucc(Node *root);
Node* searchAndFixAfterRemoval(Node *node);
int main()
{
	Node *root;
	int ele;
	char ord;
	root = (Node*)malloc(sizeof(Node));
	init(root);

	while (1) {
		scanf("%c", &ord);
		if (ord == 'q') break;
		switch (ord) {
		case 'i':
			scanf("%d", &ele);
			root = insert(root, ele);
			break;
		case's':
			scanf("%d", &ele);
			if (findElement(root, ele) == ele) {
				printf("%d\n", ele);
			}
			else printf("X\n");
			break;
		case'p':
			print(root);
			printf("\n");
			break;
		default:
			break;
		}
		getchar();
	}
	return 0;
}
void print(Node *root) {
	if (!isExternal(root)) {
		printf(" %d", root->key);
		print(root->lchild);
		print(root->rchild);
	}
}
Node* treeSearch(Node *root, int ele) {
	Node *tmp = root;
	while (!isExternal(tmp)) {
		if (tmp->key < ele) {
			tmp = tmp->rchild;
		}
		else if (tmp->key == ele) {
			return tmp;
		}
		else {
			tmp = tmp->lchild;
		}
	}
	return tmp;
}
int isExternal(Node *node) {
	if (node->lchild == NULL && node->rchild == NULL) return 1;
	else return 0;
}
int findElement(Node *root, int ele) {
	Node *tmp;
	tmp = treeSearch(root, ele);
	if (isExternal(tmp)) {
		return ele - 1;
	}
	else return tmp->key;
}
Node* insert(Node *root, int ele) {
	Node *tmp = root;

	tmp = treeSearch(root, ele);

	expandExternal(tmp, ele);
	updateHeight(tmp);
	//if (root != NULL) print(root);
	root = searchAndFixAfterInsertion(tmp);
	//if (root != NULL) print(root);
	return root;
}
void expandExternal(Node *node, int ele) {
	node->key = ele;
	node->height = 1;
	node->lchild = (Node*)malloc(sizeof(Node));
	node->rchild = (Node*)malloc(sizeof(Node));
	node->lchild->parent = node;
	node->rchild->parent = node;
	node->lchild->lchild = NULL;
	node->lchild->rchild = NULL;
	node->rchild->lchild = NULL;
	node->rchild->rchild = NULL;
	node->rchild->height = 0;
	node->lchild->height = 0;
	//printf("expanding external to internal\n");
}
void updateHeight(Node *node) {
	Node *tmp = node->parent;
	int rh, lh;
	while (tmp != NULL) {
		rh = tmp->rchild->height;
		lh = tmp->lchild->height;
		if (rh >= lh) tmp->height = rh;
		else tmp->height = lh;
		tmp->height += 1;
		tmp = tmp->parent;
	}
	//printf("update height\n");
}
int isBalanced(Node *node) {
	int rh = node->lchild->height, lh = node->rchild->height;
	int sub = 0;
	sub = rh > lh ? rh - lh : lh - rh;
	//printf("sub = %d\n",sub);
	if (sub > 1) return 0;
	else return 1;
}
Node* searchAndFixAfterInsertion(Node *node) {
	Node *tmp = node->parent;
	Node *x = NULL, *y = NULL, *z = NULL, *w = NULL;
	while (tmp != NULL) {
		//printf("%d\n", tmp->key);
		if (!isBalanced(tmp)) {
			z = tmp;
			w = z->parent;
			if (z->lchild->height > z->rchild->height) {
				y = z->lchild;
			}
			else {
				y = z->rchild;
			}
			if (y->lchild->height > y->rchild->height) {
				x = y->lchild;
			}
			else x = y->rchild;

			//z = restructure(x, y, z);

			if (w == NULL) {
				z = restructure(x, y, z);
				tmp = z;
				//print(tmp);
			}
			else if (w->lchild == z) w->lchild = restructure(x, y, z);
			else if (w->rchild == z) w->rchild = restructure(x, y, z);

			break;
		}
		tmp = tmp->parent;
	}
	tmp = node;
	while (tmp->parent != NULL) tmp = tmp->parent;
	return tmp;
}
Node* restructure(Node *x, Node *y, Node *z) {
	Node *a = NULL, *b = NULL, *c = NULL, *t[4], *g = z->parent;
	if (z->lchild == y && y->lchild == x) {
		a = x;
		b = y;
		c = z;
		t[0] = a->lchild;
		t[1] = a->rchild;
		t[2] = b->rchild;
		t[3] = c->rchild;
	}
	else if (z->rchild == y && y->rchild == x) {
		a = z;
		b = y;
		c = x;
		t[0] = a->lchild;
		t[1] = b->lchild;
		t[2] = c->lchild;
		t[3] = c->rchild;
	}
	else if (z->lchild == y && y->rchild == x) {
		a = y;
		b = x;
		c = z;
		t[0] = a->lchild;
		t[1] = b->lchild;
		t[2] = b->rchild;
		t[3] = c->rchild;
	}
	else if (z->rchild == y && y->lchild == x) {
		a = z;
		b = x;
		c = y;
		t[0] = a->lchild;
		t[1] = b->lchild;
		t[2] = b->rchild;
		t[3] = c->rchild;
	}
	
	a->lchild = t[0];
	t[0]->parent = a;
	a->rchild = t[1];
	t[1]->parent = a;

	c->lchild = t[2];
	t[2]->parent = c;
	c->rchild = t[3];
	t[3]->parent = c;

	b->lchild = a;
	b->rchild = c;
	a->parent = b;
	c->parent = b;
	b->parent = g;
	
	updateHeight(a->lchild);
	updateHeight(c->lchild);
	//printf("a is %d b is %d c is %d\n", b->lchild->key, b->key, b->rchild->key);
	return b;
}
Node* removeElement(Node *root, int ele) {
	Node *tmp = treeSearch(root, ele);
	Node *z = NULL, *zs = NULL, *pord = NULL, *g = NULL;
	if (isExternal(tmp)) {
		printf("X\n");
		return root;
	}
	z = tmp->lchild;
	if (!isExternal(z)) {
		z = tmp->rchild;
	}
	if (!isExternal(z)) { //자식이 둘
		pord = inOrderSucc(tmp->rchild);
		z = pord->lchild;
		tmp->key = pord->key;
		zs = reduceExternal(z);
	}
	else {
		zs = reduceExternal(z);
	}
	
	printf("%d\n", ele);
	if (zs->parent == NULL) return zs;
	updateHeight(zs);
	root =searchAndFixAfterRemoval(zs->parent);
	return root;
}
Node* reduceExternal(Node *z) {
	Node *zs = NULL, *p = z->parent, *g = p->parent;
	if (z == p->rchild) {
		zs = p->lchild;
	}
	else {
		zs = p->rchild;
	}

	if (g == NULL) //root
	{
		zs->parent = NULL;
	}
	else {
		if (p == g->lchild) {
			g->lchild = zs;
		}
		else g->rchild = zs;
		zs->parent = g;
	}

	//free(z);
	//free(p);
	return zs;
}
Node* inOrderSucc(Node *root) {
	Node *tmp = root;
	while (!isExternal(tmp->lchild)) {
		tmp = tmp->lchild;
	}
	return tmp;
}
Node* searchAndFixAfterRemoval(Node *node) {
	Node *tmp = node, *z, *x, *y;
	
	while (tmp != NULL) {

		if (!isBalanced(tmp)) {
			z = tmp;
			if (z->lchild->height > z->rchild->height) y = z->lchild;
			else y = z->rchild;

			if (y->lchild->height > y->rchild->height) x = y->lchild;
			else if (y->lchild->height == y->rchild->height) {
				if (y == z->lchild) x = y->lchild;
				else x = y->rchild;
			}
			else x = y->rchild;
			//printf("x is %d y is %d z is %d\n", x->key, y->key, z->key);
			tmp = restructure(x, y, z);
			if (tmp->parent != NULL) {
			    if (tmp->parent->lchild == z) {
				    tmp->parent->lchild = tmp;
			    }
			    else tmp->parent->rchild = tmp;
			}
		}
		if (tmp->parent == NULL) break;
		tmp = tmp->parent;
	}
	return tmp;
}